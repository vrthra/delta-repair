15,26d14
< CX_I = None
< 
< def minus(first, second):
<     return [i for i in first if i not in second]
< 
< def union(first, second):
<     return list(sorted(first + second))
< 
< def intersect(first, second):
<     return [i for i in first if i in second]
< 
< 
31c19
<     CX_minus_cprime_y = minus(CX_I, cprime_y)
---
>     CX_minus_cprime_y = [i for i,s in enumerate(CX_S) if i not in cprime_y]
48c36
<         CX_minus_delta_i = minus(CX_I, delta_i)
---
>         CX_minus_delta_i = [i for i,s in enumerate(CX_S) if i not in delta_i]
62,64c50,52
<         # c'y union delta_i
<         cprime_y_union_delta_i = union(cprime_y, delta_i) # these are indexes
<         s = to_str(cprime_y_union_delta_i)
---
>         cprime_y_union_delta_i = cprime_y + delta_i # these are indexes
>         delta_x_idxs = [i for i,s in enumerate(CX_S) if i in cprime_y_union_delta_i]
>         s = to_str(delta_x_idxs)
66c54
<             passing_deltas.append((s, cprime_y_union_delta_i))
---
>             passing_deltas.append((s, delta_x_idxs))
68,69c56,57
<         # if \exist i \in {1 ... n}. test(cprime_y_union delta_i) holds
<         cprime_y_union_delta_i = passing_deltas[0][1] # get the first such passing
---
>         # if \exist i \in {1 ... n}. test(cprime_y\union delta_i) holds
>         delta_x_idxs = passing_deltas[0][1] # get the first such passing
71c59
<         return ddmax2(cprime_y_union_delta_i, max(n-1, 2))
---
>         return ddmax2(delta_x_idxs, max(n-1, 2))
77c65
<         return ddmax2(cprime_y, min(len(CX_S), 2*n)) # XXX: BUGGY but from Fig 5.
---
>         return ddmax2(cprime_y, min(len(CX_S), 2*n)) # XXX: LIKELY BUGGY but from Fig 5.
100c88
<     global CX_S, CX_I
---
>     global CX_S
102d89
<     CX_I = list(range(len(cx)))
106c93,94
<     sol_idxs = ddmax2(empty_idxs, 2)
---
>     n = 2
>     sol_idxs = ddmax2(empty_idxs, n)
110,113c98,101
< #inputstr = '[*1, *2]'
< #inputstr = '[*1, *2]'
< inputstr = '1*1'
< 
---
> #inputstr = '{ "item": "Apple", "price": **3.45 }'
> #inputstr = '[`1, `2]'
> #inputstr = '[*1,*2]'
> inputstr = '`1*1`'
116,119c104,105
<     if len(sys.argv) > 1:
<         s = sys.argv[1] # inputstr
<     else:
<         s = inputstr
---
>     #s = sys.argv[1] # inputstr
>     s = inputstr
122c108
<     print('SOLUTION:', repr(solution))
---
>     print('SOLUTION:', solution)
